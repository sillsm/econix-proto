// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a.proto

#ifndef PROTOBUF_a_2eproto__INCLUDED
#define PROTOBUF_a_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtobufTest {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_a_2eproto();
void protobuf_AssignDesc_a_2eproto();
void protobuf_ShutdownFile_a_2eproto();

class TestMessage;
class TestMessage_MsgItem;

enum TestMessage_ItemType {
  TestMessage_ItemType_TypeX = 0,
  TestMessage_ItemType_TypeY = 1,
  TestMessage_ItemType_TypeZ = 2,
  TestMessage_ItemType_TypeA = 3
};
bool TestMessage_ItemType_IsValid(int value);
const TestMessage_ItemType TestMessage_ItemType_ItemType_MIN = TestMessage_ItemType_TypeX;
const TestMessage_ItemType TestMessage_ItemType_ItemType_MAX = TestMessage_ItemType_TypeA;
const int TestMessage_ItemType_ItemType_ARRAYSIZE = TestMessage_ItemType_ItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TestMessage_ItemType_descriptor();
inline const ::std::string& TestMessage_ItemType_Name(TestMessage_ItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TestMessage_ItemType_descriptor(), value);
}
inline bool TestMessage_ItemType_Parse(
    const ::std::string& name, TestMessage_ItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TestMessage_ItemType>(
    TestMessage_ItemType_descriptor(), name, value);
}
// ===================================================================

class TestMessage_MsgItem : public ::google::protobuf::Message {
 public:
  TestMessage_MsgItem();
  virtual ~TestMessage_MsgItem();

  TestMessage_MsgItem(const TestMessage_MsgItem& from);

  inline TestMessage_MsgItem& operator=(const TestMessage_MsgItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage_MsgItem& default_instance();

  void Swap(TestMessage_MsgItem* other);

  // implements Message ----------------------------------------------

  TestMessage_MsgItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessage_MsgItem& from);
  void MergeFrom(const TestMessage_MsgItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string itemName = 2;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 2;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional int32 itemValue = 3;
  inline bool has_itemvalue() const;
  inline void clear_itemvalue();
  static const int kItemValueFieldNumber = 3;
  inline ::google::protobuf::int32 itemvalue() const;
  inline void set_itemvalue(::google::protobuf::int32 value);

  // optional .ProtobufTest.TestMessage.ItemType itemType = 4;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 4;
  inline ::ProtobufTest::TestMessage_ItemType itemtype() const;
  inline void set_itemtype(::ProtobufTest::TestMessage_ItemType value);

  // @@protoc_insertion_point(class_scope:ProtobufTest.TestMessage.MsgItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_itemvalue();
  inline void clear_has_itemvalue();
  inline void set_has_itemtype();
  inline void clear_has_itemtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* itemname_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 itemvalue_;
  int itemtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_a_2eproto();
  friend void protobuf_AssignDesc_a_2eproto();
  friend void protobuf_ShutdownFile_a_2eproto();

  void InitAsDefaultInstance();
  static TestMessage_MsgItem* default_instance_;
};
// -------------------------------------------------------------------

class TestMessage : public ::google::protobuf::Message {
 public:
  TestMessage();
  virtual ~TestMessage();

  TestMessage(const TestMessage& from);

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage& default_instance();

  void Swap(TestMessage* other);

  // implements Message ----------------------------------------------

  TestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TestMessage_MsgItem MsgItem;

  typedef TestMessage_ItemType ItemType;
  static const ItemType TypeX = TestMessage_ItemType_TypeX;
  static const ItemType TypeY = TestMessage_ItemType_TypeY;
  static const ItemType TypeZ = TestMessage_ItemType_TypeZ;
  static const ItemType TypeA = TestMessage_ItemType_TypeA;
  static inline bool ItemType_IsValid(int value) {
    return TestMessage_ItemType_IsValid(value);
  }
  static const ItemType ItemType_MIN =
    TestMessage_ItemType_ItemType_MIN;
  static const ItemType ItemType_MAX =
    TestMessage_ItemType_ItemType_MAX;
  static const int ItemType_ARRAYSIZE =
    TestMessage_ItemType_ItemType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ItemType_descriptor() {
    return TestMessage_ItemType_descriptor();
  }
  static inline const ::std::string& ItemType_Name(ItemType value) {
    return TestMessage_ItemType_Name(value);
  }
  static inline bool ItemType_Parse(const ::std::string& name,
      ItemType* value) {
    return TestMessage_ItemType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string clientName = 1;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 1;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // required int32 clientId = 2;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  inline ::google::protobuf::int32 clientid() const;
  inline void set_clientid(::google::protobuf::int32 value);

  // optional string description = 3 [default = "NONE"];
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // repeated .ProtobufTest.TestMessage.MsgItem messageitems = 4;
  inline int messageitems_size() const;
  inline void clear_messageitems();
  static const int kMessageitemsFieldNumber = 4;
  inline const ::ProtobufTest::TestMessage_MsgItem& messageitems(int index) const;
  inline ::ProtobufTest::TestMessage_MsgItem* mutable_messageitems(int index);
  inline ::ProtobufTest::TestMessage_MsgItem* add_messageitems();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtobufTest::TestMessage_MsgItem >&
      messageitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtobufTest::TestMessage_MsgItem >*
      mutable_messageitems();

  // @@protoc_insertion_point(class_scope:ProtobufTest.TestMessage)
 private:
  inline void set_has_clientname();
  inline void clear_has_clientname();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientname_;
  ::std::string* description_;
  static ::std::string* _default_description_;
  ::google::protobuf::RepeatedPtrField< ::ProtobufTest::TestMessage_MsgItem > messageitems_;
  ::google::protobuf::int32 clientid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_a_2eproto();
  friend void protobuf_AssignDesc_a_2eproto();
  friend void protobuf_ShutdownFile_a_2eproto();

  void InitAsDefaultInstance();
  static TestMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TestMessage_MsgItem

// required int32 id = 1;
inline bool TestMessage_MsgItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessage_MsgItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessage_MsgItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessage_MsgItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TestMessage_MsgItem::id() const {
  return id_;
}
inline void TestMessage_MsgItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string itemName = 2;
inline bool TestMessage_MsgItem::has_itemname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestMessage_MsgItem::set_has_itemname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestMessage_MsgItem::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestMessage_MsgItem::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& TestMessage_MsgItem::itemname() const {
  return *itemname_;
}
inline void TestMessage_MsgItem::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void TestMessage_MsgItem::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void TestMessage_MsgItem::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMessage_MsgItem::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  return itemname_;
}
inline ::std::string* TestMessage_MsgItem::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestMessage_MsgItem::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 itemValue = 3;
inline bool TestMessage_MsgItem::has_itemvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestMessage_MsgItem::set_has_itemvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestMessage_MsgItem::clear_has_itemvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestMessage_MsgItem::clear_itemvalue() {
  itemvalue_ = 0;
  clear_has_itemvalue();
}
inline ::google::protobuf::int32 TestMessage_MsgItem::itemvalue() const {
  return itemvalue_;
}
inline void TestMessage_MsgItem::set_itemvalue(::google::protobuf::int32 value) {
  set_has_itemvalue();
  itemvalue_ = value;
}

// optional .ProtobufTest.TestMessage.ItemType itemType = 4;
inline bool TestMessage_MsgItem::has_itemtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestMessage_MsgItem::set_has_itemtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestMessage_MsgItem::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestMessage_MsgItem::clear_itemtype() {
  itemtype_ = 0;
  clear_has_itemtype();
}
inline ::ProtobufTest::TestMessage_ItemType TestMessage_MsgItem::itemtype() const {
  return static_cast< ::ProtobufTest::TestMessage_ItemType >(itemtype_);
}
inline void TestMessage_MsgItem::set_itemtype(::ProtobufTest::TestMessage_ItemType value) {
  assert(::ProtobufTest::TestMessage_ItemType_IsValid(value));
  set_has_itemtype();
  itemtype_ = value;
}

// -------------------------------------------------------------------

// TestMessage

// required string clientName = 1;
inline bool TestMessage::has_clientname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestMessage::set_has_clientname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestMessage::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestMessage::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& TestMessage::clientname() const {
  return *clientname_;
}
inline void TestMessage::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void TestMessage::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void TestMessage::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMessage::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* TestMessage::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestMessage::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 clientId = 2;
inline bool TestMessage::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestMessage::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestMessage::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestMessage::clear_clientid() {
  clientid_ = 0;
  clear_has_clientid();
}
inline ::google::protobuf::int32 TestMessage::clientid() const {
  return clientid_;
}
inline void TestMessage::set_clientid(::google::protobuf::int32 value) {
  set_has_clientid();
  clientid_ = value;
}

// optional string description = 3 [default = "NONE"];
inline bool TestMessage::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestMessage::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestMessage::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestMessage::clear_description() {
  if (description_ != _default_description_) {
    description_->assign(*_default_description_);
  }
  clear_has_description();
}
inline const ::std::string& TestMessage::description() const {
  return *description_;
}
inline void TestMessage::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == _default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void TestMessage::set_description(const char* value) {
  set_has_description();
  if (description_ == _default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void TestMessage::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == _default_description_) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMessage::mutable_description() {
  set_has_description();
  if (description_ == _default_description_) {
    description_ = new ::std::string(*_default_description_);
  }
  return description_;
}
inline ::std::string* TestMessage::release_description() {
  clear_has_description();
  if (description_ == _default_description_) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(_default_description_);
    return temp;
  }
}
inline void TestMessage::set_allocated_description(::std::string* description) {
  if (description_ != _default_description_) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(_default_description_);
  }
}

// repeated .ProtobufTest.TestMessage.MsgItem messageitems = 4;
inline int TestMessage::messageitems_size() const {
  return messageitems_.size();
}
inline void TestMessage::clear_messageitems() {
  messageitems_.Clear();
}
inline const ::ProtobufTest::TestMessage_MsgItem& TestMessage::messageitems(int index) const {
  return messageitems_.Get(index);
}
inline ::ProtobufTest::TestMessage_MsgItem* TestMessage::mutable_messageitems(int index) {
  return messageitems_.Mutable(index);
}
inline ::ProtobufTest::TestMessage_MsgItem* TestMessage::add_messageitems() {
  return messageitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtobufTest::TestMessage_MsgItem >&
TestMessage::messageitems() const {
  return messageitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtobufTest::TestMessage_MsgItem >*
TestMessage::mutable_messageitems() {
  return &messageitems_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtobufTest

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtobufTest::TestMessage_ItemType>() {
  return ::ProtobufTest::TestMessage_ItemType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_a_2eproto__INCLUDED
